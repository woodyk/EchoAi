#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# File: modals.py
# Description: Reusable Urwid modal dialogs for EchoAI CLI (theme‑aware, auto‑sizing multiline)
# Author: Ms. White
# Created: 2025-05-04
"""
Quick start
-----------
from echoai.tui.modals import Modal

ui = Modal(theme="default")     # configure once

if ui.confirm("Proceed? "):
    name = ui.input("Enter your name:")
    notes = ui.input_multiline("Describe yourself:")
    ui.info("Process complete.")
    ui.warning("Watch out!")
    ui.error("Something went wrong.")
"""
from __future__ import annotations
import sys
from typing import Optional, Any, Callable
import urwid
from echoai.tui.tui_layout import get_theme_palette


class _BlockingLoop(urwid.MainLoop):
    """Runs until ExitMainLoop is raised or 'q' pressed."""
    def __init__(self, widget: urwid.Widget, palette: list[tuple], handler: Callable[[str], None]):
        screen = urwid.raw_display.Screen()
        screen.set_terminal_properties(colors=256)
        super().__init__(widget, palette, unhandled_input=self._handle_input, screen=screen)
        self._handler = handler

    def _handle_input(self, key: str):
        if key.lower() == 'q':
            raise urwid.ExitMainLoop()
        self._handler(key)


class Modal:
    """
    Instance‑based modal dialogs using EchoAI theme keys.
    Default borders: 'prompt'; key hints: 'footer'; event borders: 'info'/'warning'/'error'.
    Multiline inputs auto‑size height.
    """
    def __init__(self, *, theme: str = 'default'):
        self.palette, self.theme = get_theme_palette(theme)

    def confirm(self, text: str) -> bool:
        """Yes/No: 'y' ⇒ True, 'n'/Esc ⇒ False."""
        result: list[bool] = [False]
        def handler(key: str):
            k = key.lower()
            if k == 'y':
                result[0] = True
                raise urwid.ExitMainLoop()
            if k in ('n', 'esc'):
                raise urwid.ExitMainLoop()

        body = urwid.Filler(
            urwid.Pile([
                urwid.Text(text, align='center'),
                urwid.Divider(),
                urwid.Text(('footer', '[y] yes   [n] no   [esc] cancel'), align='center'),
            ]), valign='middle'
        )
        overlay = self._overlay(body, width=max(60, len(text)+10), height=7, border_attr='prompt')
        loop = _BlockingLoop(overlay, self.palette, handler)
        loop.run()
        return result[0]

    def input(self, prompt: str) -> Optional[str]:
        """Single‑line input: Enter ⇒ str, Esc ⇒ None."""
        return self._input_dialog(prompt, multiline=False)

    def input_multiline(self, prompt: str) -> Optional[str]:
        """Multi‑line input: Ctrl‑d ⇒ str, Esc ⇒ None. Auto‑grows height."""
        return self._input_dialog(prompt, multiline=True)

    def info(self, text: str) -> None:
        """Info modal: any key to dismiss."""
        self._event('info', text)

    def warning(self, text: str) -> None:
        """Warning modal: any key to dismiss."""
        self._event('warning', text)

    def error(self, text: str) -> None:
        """Error modal: any key to dismiss."""
        self._event('error', text)

    def _overlay(self, inner: urwid.Widget, width: int, height: Any, *, border_attr: str) -> urwid.Overlay:
        styled = urwid.AttrMap(urwid.LineBox(inner), border_attr)
        return urwid.Overlay(
            styled,
            urwid.SolidFill(),
            align='center', width=width,
            valign='middle', height=height,
        )

    def _input_dialog(self, prompt: str, *, multiline: bool) -> Optional[str]:
        result: list[Optional[str]] = [None]
        edit = urwid.Edit(multiline=multiline)
        edit_map = urwid.AttrMap(edit, 'input')
        edit_box = urwid.Padding(edit_map, left=2, right=2)

        hint_text = '[enter] submit  [esc] cancel' if not multiline else '[ctrl-d] submit  [esc] cancel'
        pile = urwid.Pile([
            urwid.Text(prompt, align='center'),
            urwid.Divider(),
            edit_box,
            urwid.Divider(),
            urwid.Text(('footer', hint_text), align='center'),
        ])
        width = max(60, len(prompt)+10)
        height = 'pack' if multiline else 8

        def handler(key: str):
            if multiline and key == 'ctrl d':
                result[0] = edit.edit_text
                raise urwid.ExitMainLoop()
            if not multiline and key == 'enter':
                result[0] = edit.edit_text
                raise urwid.ExitMainLoop()
            if key == 'esc':
                raise urwid.ExitMainLoop()

        overlay = self._overlay(pile, width=width, height=height, border_attr='prompt')
        loop = _BlockingLoop(overlay, self.palette, handler)
        loop.run()
        return result[0]

    def _event(self, level: str, text: str) -> None:
        attr = level if level in ('info', 'warning', 'error') else 'prompt'
        def handler(_key: str):
            raise urwid.ExitMainLoop()
        body = urwid.Filler(urwid.Text((attr, text), align='center'), valign='middle')
        overlay = self._overlay(body, width=len(text)+8, height=5, border_attr=attr)
        loop = _BlockingLoop(overlay, self.palette, handler)
        loop.run()

if __name__ == '__main__':
    ui = Modal(theme='default')
    try:
        if ui.confirm('Run modal tests?'):
            name = ui.input('Your name:')
            print('→ input:', name)
            notes = ui.input_multiline('Describe yourself:')
            print('→ multiline:', notes)
            ui.info('Info displayed.')
            ui.warning('Warning displayed!')
            ui.error('Error displayed!')
            ui.confirm('Exit demo?')
    except KeyboardInterrupt:
        sys.exit(1)

