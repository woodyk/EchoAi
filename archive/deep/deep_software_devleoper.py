#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# File: deep_software_developer.py
# Author: [Your Name]
# Description: Deep Software Developer workflow. This script takes a project plan (in text)
# and uses an LLM to generate a complete Python implementation covering all the plan's features.
# Created: 2025-03-24
# Modified: 2025-03-24

from interactor import Interactor
import json

def deep_software_developer(project_plan: str) -> str:
    """
    Takes a project plan document (generated by deep_project_plan.py) and produces
    a complete Python code implementation that accounts for all features and components.
    """
    # Instantiate our LLM interactor (using your provided script)
    #llm = Interactor(model="openai:gpt-4o-mini")
    llm = Interactor(model="ollama:llama3.2")
    
    # 1. Overview: Ask the LLM to provide a summary of the project plan and the key modules/components
    overview_prompt = (
        "Please analyze the following project plan and extract the key modules, features, "
        "and components that should be implemented in a complete Python solution. "
        "Output your answer as a list with brief descriptions for each module/component.\n\n"
        f"{project_plan}"
    )
    overview_response = llm.interact(overview_prompt)
    components = parse_components(overview_response)
    
    # 2. Code Generation: For each component, prompt the LLM to generate detailed Python code.
    code_sections = []
    for comp in components:
        comp_prompt = (
            f"Based on the project plan, generate a complete Python implementation for the module/component "
            f"'{comp}'. Include function definitions, classes, comments, and example usage where appropriate. "
            "Ensure that the code is modular and that it integrates well with other parts of the project. "
            "Output only valid Python code."
        )
        comp_code = llm.interact(comp_prompt)
        section = f"# Module: {comp}\n{comp_code}\n"
        code_sections.append(section)
    
    # 3. Synthesis: Ask the LLM to compile all the individual module code sections into a cohesive project.
    synthesis_prompt = (
        "Combine the following Python code sections into a complete, runnable Python project. "
        "Make sure to include a main function or equivalent that ties all the modules together, and "
        "provide comments/documentation at the top explaining the project structure.\n\n"
        + "\n".join(code_sections)
    )
    full_code = llm.interact(synthesis_prompt)
    
    # 4. Optionally, add a header and footer to the final code document.
    final_document = assemble_code_document(full_code)
    return final_document

def parse_components(response: str) -> list:
    """
    Parse the LLM response into a list of components.
    This placeholder function splits the response by newlines and extracts bullet points.
    Modify this parsing logic based on the expected response format.
    """
    # Example: split by newlines and remove any bullet markers or numbers.
    components = [line.strip("-â€¢0123456789. ") for line in response.splitlines() if line.strip()]
    return components

def assemble_code_document(code: str) -> str:
    """
    Assemble the final code document by adding a header with project documentation and a footer.
    """
    header = (
        "# Complete Python Project Generated by Deep Software Developer\n"
        "#\n"
        "# This project implements all features described in the project plan.\n"
        "# Please review the code, install any required dependencies, and run the main function to execute.\n"
        "#\n\n"
    )
    footer = "\n\n# End of Project Implementation"
    return header + code + footer

def main():
    print("Welcome to Deep Software Developer!")
    # For demonstration, we assume the project plan is provided as text input.
    # In a real-world scenario, you might load this from a file or another source.
    print("Please paste your project plan below (end with an empty line):")
    plan_lines = []
    while True:
        line = input()
        if line.strip() == "":
            break
        plan_lines.append(line)
    project_plan = "\n".join(plan_lines)
    
    print("\nGenerating complete Python project based on the plan...\n")
    project_code = deep_software_developer(project_plan)
    
    # Output the generated code
    print("\nFinal Python Project Code:\n")
    print(project_code)
    
    # Optionally, write the code to a file
    output_filename = "final_project.py"
    with open(output_filename, "w", encoding="utf-8") as f:
        f.write(project_code)
    print(f"\nThe complete project code has been saved to '{output_filename}'.")

if __name__ == "__main__":
    main()

